package nl.mrwouter.fixturecreator.files;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;
import java.util.stream.Collectors;

import nl.mrwouter.fixturecreator.objects.Attribute;
import nl.mrwouter.fixturecreator.objects.Fixture;
import nl.mrwouter.fixturecreator.objects.parameter.Parameter;
import nl.mrwouter.fixturecreator.objects.parameter.ParameterType;
import nl.mrwouter.fixturecreator.objects.parameter.stops.ParameterStop;
import nl.mrwouter.fixturecreator.objects.parameter.stops.ParameterStopType;
import nl.mrwouter.fixturecreator.objects.parameter.stops.ValueDisplayFormat;
import nl.mrwouter.fixturecreator.objects.parameter.stops.WheelStop;

public class FixtureParser {

	private static FixtureParser instance;

	public static FixtureParser getInstance() {
		if (instance == null) {
			instance = new FixtureParser();
		}
		return instance;
	}

	public void write(Fixture fixture, File targetFile) {
		try (BufferedFixtureWriter out = new BufferedFixtureWriter(new FileWriter(targetFile))) {
			DateFormat fmt = new SimpleDateFormat("MMMM dd, yyyy", Locale.US);

			out.writeln("// Autogenerated by FixtureCreator v1.0");
			if (fixture.getFullManufacturer() != null)
				out.writeln("// manufacturer = \"" + fixture.getFullManufacturer() + "\"");
			if (fixture.getFullName() != null)
				out.writeln("// name = \"" + fixture.getFullName() + "\"");

			out.writeln("// Last updated " + fmt.format(new Date()));

			out.newLine();

			out.writeln("Fixture");
			out.writeln("	manufacturer = \"" + fixture.getManufacturer().toUpperCase() + "\"");
			out.writeln("	name = \"" + fixture.getName() + "\"");
			out.writeln("	version = " + fixture.getVersion() + "");

			for (Attribute attr : fixture.getAttributes()) {
				out.newLine();
				out.writeln("	Attribute");
				out.writeln("		name = \"" + attr.getName() + "\"");
				out.writeln("		channel = " + attr.getChannel());
				if (attr.getFineChannel() != -1)
					out.writeln("		fineChan = " + attr.getFineChannel());
				if (attr.getMinVal() != -1)
					out.writeln("		minval = " + attr.getMinVal());
				if (attr.getMaxVal() != -1)
					out.writeln("		maxval = " + attr.getMinVal());

				out.writeln("		homeVal = " + attr.getHomeVal());
			}

			for (Parameter param : fixture.getParameters()) {
				out.newLine();
				out.writeln("	Parameter");
				out.writeln("		name = \"" + param.getName() + "\"");
				out.writeln("		type = " + param.getType().getAbbreviation());
				out.writeln("		displayerNum = " + param.getDisplayerNum());
				out.writeln("		attribList = " + Arrays.stream(param.getAttributeList()).mapToObj(String::valueOf)
						.collect(Collectors.joining(",")));
				for (ParameterStop stop: param.getStops()) {
					out.writeln("		stop = " + stop.toString());
				}
			}
			out.write("end");
			out.flush();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}

	public Fixture parse(File file) {

		try (Scanner scanner = new Scanner(file)) {
			String fixtureManufacturer = null, fixtureName = null, fixtureVersion = null, fullManufacturer = null,
					fullName = null;
			List<Attribute> attributes = new ArrayList<>();
			List<Parameter> parameters = new ArrayList<>();

			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();

				if (line.replaceAll("\\s", "").isEmpty())
					continue;
				if (line.contains("//")) {
					if (line.contains("manufacturer") && line.contains("="))
						fullManufacturer = line.split("=")[1].replace("\"", "").replaceAll("\\s", "");
					if (line.contains("name") && line.contains("="))
						fullName = line.split("=")[1].replace("\"", "").replaceAll("\\s", "");
				}

				if (line.replaceAll("\\s", "").toLowerCase().equals("fixture")) {
					while (scanner.hasNextLine()) {
						line = scanner.nextLine();
						if (line.replaceAll("\\s", "").isEmpty() || line.contains("//"))
							continue;

						if (line.contains("manufacturer") && line.contains("="))
							fixtureManufacturer = line.split("=")[1].replace("\"", "").replaceAll("\\s", "");
						else if (line.contains("name") && line.contains("="))
							fixtureName = line.split("=")[1].replace("\"", "").replaceAll("\\s", "");
						else if (line.contains("version") && line.contains("="))
							fixtureVersion = line.split("=")[1].replaceAll("\\s", "");
						else if (!line.toLowerCase().contains("fixture"))
							break;
					}
				}
				if (line.toLowerCase().contains("attribute"))
					break;
			}

			SimpleEntry<Object, NextFound> parsedObject;

			// first attributes, then parameters, so NextFound should be attribute
			NextFound nf = NextFound.ATTRIBUTE;

			while ((parsedObject = parseObject(scanner, nf)) != null) {
				SimpleEntry<Object, NextFound> se = parsedObject;
				if (se.getKey() instanceof Parameter) {
					parameters.add((Parameter) se.getKey());
				} else if (se.getKey() instanceof Attribute) {
					attributes.add((Attribute) se.getKey());
				}

				nf = se.getValue();
				if (nf == NextFound.NOTHING) {
					break;
				}
			}

			return new Fixture(fixtureManufacturer, fixtureName, fixtureVersion, fullManufacturer, fullName, attributes,
					parameters);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return null;
	}

	public SimpleEntry<Object, NextFound> parseObject(Scanner scanner, NextFound next) {
		String attributeName = null;
		int attributeChannel = 0, attributeFineChan = -1, attributeHomeVal = 0, attributeMinVal = -1,
				attributeMaxVal = -1;

		String parameterName = null, parameterType = null;
		int[] attribList = null;
		int displayerNum = -1;
		List<ParameterStop> stops = new ArrayList<>();

		while (scanner.hasNextLine()) {
			Object object = null;
			String line = scanner.nextLine();

			if (line.replaceAll("\\s", "").isEmpty() || line.contains("//"))
				continue;

			if (next == NextFound.ATTRIBUTE) {
				if (line.contains("name") && line.contains("="))
					attributeName = line.split("=")[1].replace("\"", "").replaceAll("\\s", "");
				else if (line.contains("channel") && line.contains("="))
					attributeChannel = Integer.valueOf(line.split("=")[1].replaceAll("\\s", ""));
				else if (line.contains("fineChan") && line.contains("="))
					attributeFineChan = Integer.valueOf(line.split("=")[1].replaceAll("\\s", ""));
				else if (line.contains("homeVal") && line.contains("="))
					attributeHomeVal = Integer.valueOf(line.split("=")[1].replaceAll("\\s", ""));
				else if (line.contains("minVal") && line.contains("="))
					attributeMinVal = Integer.valueOf(line.split("=")[1].replaceAll("\\s", ""));
				else if (line.contains("maxVal") && line.contains("="))
					attributeMaxVal = Integer.valueOf(line.split("=")[1].replaceAll("\\s", ""));
				else
					object = new Attribute(attributeName, attributeChannel, attributeHomeVal, attributeFineChan,
							attributeMinVal, attributeMaxVal);

			} else if (next == NextFound.PARAMETER) {
				if (line.contains("name") && line.contains("="))
					parameterName = line.split("=")[1].replace("\"", "").replaceAll("\\s", "");
				else if (line.contains("type") && line.contains("="))
					parameterType = line.split("=")[1].replaceAll("\\s", "");
				else if (line.contains("displayerNum") && line.contains("="))
					displayerNum = Integer.valueOf(line.split("=")[1].replaceAll("\\s", ""));
				else if (line.contains("attribList") && line.contains("="))
					attribList = (int[]) Arrays.stream(line.split("=")[1].replaceAll("\\s", "").split(","))
							.mapToInt(i -> Integer.valueOf(i)).toArray();
				else if (line.contains("stop") && line.contains("=")) {
					// stop = ( 32: 32),N,"Color 2"
					// stop = (M 0:255),D,0,170,"Pan="
					String name = "";
					WheelStop degreeRange = null;

					String[] parameterStop = line.split("=")[1].split(",");
					String[] stopArr = parameterStop[0].replace("(", "").replace(")", "").substring(2).replace(" ", "")
							.split(":");

					WheelStop stop = new WheelStop(Integer.parseInt(stopArr[0]), Integer.parseInt(stopArr[1]));
					ParameterStopType stopType = ParameterStopType.fromAbbreviation(parameterStop[0].substring(2, 3));

					ValueDisplayFormat vdf = ValueDisplayFormat.fromAbbreviation(parameterStop[1]);

					if (parameterStop.length == 3) {
						name = parameterStop[2].split("\"")[1];
					} else {
						name = parameterStop[4].split("\"")[1];
					}
					if (vdf == ValueDisplayFormat.DEGREES) {
						degreeRange = new WheelStop(Integer.parseInt(parameterStop[2]), Integer.parseInt(parameterStop[3]));
					}
					
					stops.add(new ParameterStop(name, stopType, stop, vdf, degreeRange));

				} else
					object = new Parameter(parameterName, displayerNum, attribList,
							ParameterType.fromAbbreviation(parameterType), stops);

			}
			if (object != null) {
				while (scanner.hasNextLine()) {
					if (line.toLowerCase().contains("attribute")) {
						return new SimpleEntry<>(object, NextFound.ATTRIBUTE);
					} else if (line.toLowerCase().contains("parameter")) {
						return new SimpleEntry<>(object, NextFound.PARAMETER);
					}
					line = scanner.nextLine();
				}
				return new SimpleEntry<>(object, NextFound.NOTHING);
			}
		}
		return null;
	}

	public enum NextFound {
		NOTHING, ATTRIBUTE, PARAMETER;
	}
}
